generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // directUrl = env("DIRECT_URL")
}

enum UserRole {
    USER
    ADMIN
    SELLER
}

model User {
    id        String    @id @default(cuid())
    username  String    @unique @db.VarChar(100)
    name      String    @db.VarChar(100)
    email     String    @unique
    role      UserRole  @default(USER)
    provider  String?   @db.VarChar(100)
    token     String?
    password  String?   @db.VarChar(100)
    store_id  String?   @unique
    image     String?   @db.VarChar(100)
    store     Store?
    addresses Address[]

    @@map("users")
}

model Address {
    id          String  @id @default(cuid())
    street      String  @db.VarChar(100)
    village     String  @db.VarChar(100)
    district    String  @db.VarChar(100)
    city        String  @db.VarChar(100)
    province    String  @db.VarChar(100)
    country     String? @db.VarChar(100)
    postal_code String? @db.VarChar(10)
    description String? @db.VarChar(150)
    user_id     String?
    user        User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("addresses")
}

model Store {
    id                 String            @id @default(cuid())
    name               String            @db.VarChar(100)
    owner_id           String            @unique
    owner              User              @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    products           Product[]
    product_categories ProductCategory[]

    @@map("stores")
}

model ProductCategory {
    id       String    @id @default(cuid())
    name     String    @db.VarChar(100)
    store_id String
    products Product[]
    store    Store     @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([name, store_id])
    @@index([store_id])
    @@map("product_categories")
}

model Product {
    id          String           @id @default(cuid())
    name        String           @db.VarChar(100)
    price       Decimal          @db.Decimal(10, 2)
    description String           @db.VarChar(255)
    stock       Int              @default(0)
    category_id String?
    store_id    String
    store       Store            @relation(fields: [store_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
    category    ProductCategory? @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

    @@index([store_id])
    @@index([category_id])
    @@map("products")
}

model Province {
    id        BigInt    @id @default(autoincrement())
    name      String
    altName   String    @default("")
    latitude  Float     @default(0)
    longitude Float     @default(0)
    regencies Regency[]

    @@map("provinces")
}

model Regency {
    id         BigInt     @id @default(autoincrement())
    provinceId BigInt
    name       String
    altName    String     @default("")
    latitude   Float      @default(0)
    longitude  Float      @default(0)
    province   Province   @relation(fields: [provinceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    districts  District[]

    @@map("regencies")
}

model District {
    id        BigInt    @id @default(autoincrement())
    regencyId BigInt
    name      String
    altName   String    @default("")
    latitude  Float     @default(0)
    longitude Float     @default(0)
    regency   Regency   @relation(fields: [regencyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    villages  Village[]

    @@map("districts")
}

model Village {
    id         BigInt   @id @default(autoincrement())
    districtId BigInt
    name       String
    altName    String   @default("")
    latitude   Float    @default(0)
    longitude  Float    @default(0)
    district   District @relation(fields: [districtId], references: [id], onUpdate: Cascade, onDelete: Cascade)

    @@map("villages")
}
