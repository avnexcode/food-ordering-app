generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADMIN
    SELLER
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

enum PaymentMethod {
    BANK_TRANSFER
    CREDIT_CARD
    VIRTUAL_ACCOUNT
    E_WALLET
}

enum PaymentStatus {
    PENDING
    EXPIRED
    PAID
    FAILED
    REFUNDED
}

enum DisbursementStatus {
    PENDING
    PROCESSING
    SUCCESS
    FAILED
}

enum TransactionType {
    INCOME
    EXPENSE
}

model User {
    id            String    @id @default(cuid())
    username      String    @unique @db.VarChar(100)
    name          String    @db.VarChar(100)
    email         String    @unique
    phone         String?   @db.VarChar(20)
    role          UserRole  @default(USER)
    provider      String    @db.VarChar(100)
    token         String?
    password      String?   @db.VarChar(100)
    store_id      String?   @unique
    image         String?   @db.VarChar(255)
    store         Store?
    addresses     Address[]
    orders        Order[]
    created_at    DateTime  @default(now())
    updated_at    DateTime  @updatedAt
    refresh_token String?

    @@map("users")
}

model Address {
    id          String   @id @default(cuid())
    label       String   @db.VarChar(50)
    street      String   @db.VarChar(100)
    village_id  String
    district_id String
    city_id     String
    province_id String
    country     String?  @db.VarChar(100)
    postal_code String?  @db.VarChar(10)
    description String?  @db.VarChar(150)
    is_default  Boolean  @default(false)
    user_id     String?
    latitude    Float?
    longitude   Float?
    user        User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
    village     Village  @relation(fields: [village_id], references: [id])
    district    District @relation(fields: [district_id], references: [id])
    regency     Regency  @relation(fields: [city_id], references: [id])
    province    Province @relation(fields: [province_id], references: [id])
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    @@map("addresses")
}

model Store {
    id                 String            @id @default(cuid())
    name               String            @db.VarChar(100)
    description        String?           @db.Text
    image              String?           @db.VarChar(255)
    bank_name          String?           @db.VarChar(100)
    bank_account       String?           @db.VarChar(50)
    bank_holder        String?           @db.VarChar(100)
    owner_id           String            @unique
    owner              User              @relation(fields: [owner_id], references: [id], onDelete: Cascade)
    products           Product[]
    product_categories ProductCategory[]
    orders             Order[]
    transactions       Transaction[]
    disbursements      Disbursement[]
    created_at         DateTime          @default(now())
    updated_at         DateTime          @updatedAt

    @@map("stores")
}

model ProductCategory {
    id          String    @id @default(cuid())
    name        String    @db.VarChar(100)
    description String?   @db.Text
    store_id    String
    products    Product[]
    store       Store     @relation(fields: [store_id], references: [id], onDelete: Cascade)
    created_at  DateTime  @default(now())
    updated_at  DateTime  @updatedAt

    @@unique([name, store_id])
    @@index([store_id])
    @@map("product_categories")
}

model Product {
    id          String           @id @default(cuid())
    name        String           @db.VarChar(100)
    slug        String           @unique
    price       Decimal          @db.Decimal(10, 2)
    description String           @db.Text
    images      String[]
    stock       Int              @default(0)
    weight      Float?           @db.DoublePrecision
    category_id String?
    store_id    String
    store       Store            @relation(fields: [store_id], references: [id], onDelete: Cascade)
    category    ProductCategory? @relation(fields: [category_id], references: [id], onDelete: Restrict)
    order_items OrderItem[]
    created_at  DateTime         @default(now())
    updated_at  DateTime         @updatedAt

    @@index([store_id])
    @@index([category_id])
    @@map("products")
}

model Order {
    id              String        @id @default(cuid())
    user_id         String
    store_id        String
    status          OrderStatus   @default(PENDING)
    payment_status  PaymentStatus @default(PENDING)
    total_amount    Decimal       @db.Decimal(10, 2)
    shipping_cost   Decimal       @db.Decimal(10, 2)
    tracking_number String?
    note            String?       @db.Text
    user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
    store           Store         @relation(fields: [store_id], references: [id], onDelete: Cascade)
    order_items     OrderItem[]
    transactions    Transaction[]
    created_at      DateTime      @default(now())
    updated_at      DateTime      @updatedAt
    Payment         Payment?

    @@index([user_id])
    @@index([store_id])
    @@map("orders")
}

model OrderItem {
    id         String   @id @default(cuid())
    order_id   String
    product_id String
    quantity   Int
    price      Decimal  @db.Decimal(10, 2)
    subtotal   Decimal  @db.Decimal(10, 2)
    order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
    product    Product  @relation(fields: [product_id], references: [id], onDelete: Restrict)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    @@index([order_id])
    @@index([product_id])
    @@map("order_items")
}

model Payment {
    id             String        @id @default(cuid())
    order_id       String        @unique
    amount         Decimal       @db.Decimal(10, 2)
    payment_method PaymentMethod
    status         PaymentStatus @default(PENDING)
    midtrans_id    String        @unique
    payment_url    String?
    paid_at        DateTime?
    expired_at     DateTime?
    order          Order         @relation(fields: [order_id], references: [id], onDelete: Cascade)
    disbursement   Disbursement?
    created_at     DateTime      @default(now())
    updated_at     DateTime      @updatedAt

    @@index([order_id])
    @@map("payments")
}

model Disbursement {
    id             String             @id @default(cuid())
    payment_id     String             @unique
    store_id       String
    amount         Decimal            @db.Decimal(10, 2)
    status         DisbursementStatus @default(PENDING)
    bank_name      String
    account_number String
    account_name   String
    description    String?            @db.Text
    disbursed_at   DateTime?
    payment        Payment            @relation(fields: [payment_id], references: [id], onDelete: Cascade)
    store          Store              @relation(fields: [store_id], references: [id], onDelete: Cascade)
    created_at     DateTime           @default(now())
    updated_at     DateTime           @updatedAt

    @@index([payment_id])
    @@index([store_id])
    @@map("disbursements")
}

model Transaction {
    id          String          @id @default(cuid())
    type        TransactionType
    amount      Decimal         @db.Decimal(10, 2)
    description String?         @db.Text
    store_id    String
    order_id    String?
    store       Store           @relation(fields: [store_id], references: [id], onDelete: Cascade)
    order       Order?          @relation(fields: [order_id], references: [id], onDelete: SetNull)
    created_at  DateTime        @default(now())
    updated_at  DateTime        @updatedAt

    @@index([store_id])
    @@index([order_id])
    @@map("transactions")
}

model Province {
    id        String    @id @default(cuid())
    name      String
    alt_name  String    @default("")
    latitude  Float     @default(0)
    longitude Float     @default(0)
    regencies Regency[]
    addresses Address[]

    @@map("provinces")
}

model Regency {
    id          String     @id @default(cuid())
    province_id String
    name        String
    alt_name    String     @default("")
    latitude    Float      @default(0)
    longitude   Float      @default(0)
    province    Province   @relation(fields: [province_id], references: [id], onDelete: Cascade)
    districts   District[]
    addresses   Address[]

    @@map("regencies")
}

model District {
    id         String    @id @default(cuid())
    regency_id String
    name       String
    alt_name   String    @default("")
    latitude   Float     @default(0)
    longitude  Float     @default(0)
    regency    Regency   @relation(fields: [regency_id], references: [id], onDelete: Cascade)
    villages   Village[]
    addresses  Address[]

    @@map("districts")
}

model Village {
    id          String    @id @default(cuid())
    district_id String
    name        String
    alt_name    String    @default("")
    latitude    Float     @default(0)
    longitude   Float     @default(0)
    district    District  @relation(fields: [district_id], references: [id], onDelete: Cascade)
    addresses   Address[]

    @@map("villages")
}
